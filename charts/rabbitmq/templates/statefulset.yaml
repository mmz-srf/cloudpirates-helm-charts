apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "rabbitmq.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "rabbitmq.labels" . | nindent 4 }}
  {{- with (include "rabbitmq.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "rabbitmq.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      {{- include "rabbitmq.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "rabbitmq.selectorLabels" . | nindent 8 }}
    spec:
      {{- with (include "rabbitmq.imagePullSecrets" .) }}
      {{ . | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ include "rabbitmq.serviceAccountName" . }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if or .Values.auth.enabled .Values.installPlugins .Values.customScripts.initContainers }}
      initContainers:
        {{- if .Values.auth.enabled }}
        - name: init-erlang-cookie
          image: "{{ .Values.initContainer.image.registry | default .Values.global.imageRegistry }}/{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          imagePullPolicy: "{{ .Values.initContainer.image.pullPolicy }}"
          {{- if .Values.initContainer.securityContext }}
          securityContext:
            {{- toYaml .Values.initContainer.securityContext | nindent 12 }}
          {{- end }}
          command:
            - sh
            - -c
            - |
              echo "$RABBITMQ_ERLANG_COOKIE" > /var/lib/rabbitmq/.erlang.cookie
              chmod 400 /var/lib/rabbitmq/.erlang.cookie
              chown {{ .Values.securityContext.runAsUser | default 999 }}:{{ .Values.securityContext.runAsGroup | default 999 }} /var/lib/rabbitmq/.erlang.cookie
          env:
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ include "rabbitmq.secretName" . }}
                  key: {{ include "rabbitmq.secretErlangCookieKey" . }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
        {{- end }}
        {{- if .Values.installPlugins }}
        - name: download-plugins
          image: "{{ .Values.initContainer.image.registry | default .Values.global.imageRegistry }}/{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          imagePullPolicy: "{{ .Values.initContainer.image.pullPolicy }}"
          {{- if .Values.initContainer.securityContext }}
          securityContext:
            {{- toYaml .Values.initContainer.securityContext | nindent 12 }}
          {{- end }}
          command:
            - sh
            - -c
            - |
              mkdir -p /var/lib/rabbitmq/plugins
              {{- range .Values.installPlugins }}
              echo "Downloading plugin from {{ . }}"
              wget -O /var/lib/rabbitmq/plugins/$(basename {{ . }}) {{ . }}
              {{- end }}
              echo "Moving downloaded plugins to shared directory"
              if ls /var/lib/rabbitmq/plugins/*.ez 1> /dev/null 2>&1; then
                mv /var/lib/rabbitmq/plugins/*.ez /tmp/plugins/
                echo "Successfully moved plugins"
              else
                echo "No plugins to move"
              fi
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
            - name: plugins
              mountPath: /tmp/plugins
        - name: copy-plugins
          image: {{ include "rabbitmq.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          {{- if .Values.initContainer.securityContext }}
          securityContext:
            {{- toYaml .Values.initContainer.securityContext | nindent 12 }}
          {{- end }}
          command:
            - sh
            - -c
            - |
              echo "Copying built-in RabbitMQ plugins to shared directory"
              cp -r /opt/rabbitmq/plugins/* /tmp/plugins/
              echo "Built-in plugins copied successfully"
          volumeMounts:
            - name: plugins
              mountPath: /tmp/plugins
        {{- end }}
        {{- if .Values.customScripts.initContainers }}
        {{- toYaml .Values.customScripts.initContainers | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          image: {{ include "rabbitmq.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          {{- if .Values.customScripts.postStart.enabled }}
          lifecycle:
            postStart:
              exec:
                command:
                  {{- toYaml .Values.customScripts.postStart.command | nindent 18 }}
          {{- end }}
          ports:
            - name: amqp
              containerPort: 5672
            - name: mgmt
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: dist
              containerPort: 25672
            {{- if .Values.metrics.enabled }}
            - name: prometheus
              containerPort: {{ .Values.metrics.port }}
            {{- end }}
            {{- range .Values.extraPorts }}
            - containerPort: {{ .containerPort }}
              name: {{ .name }}
            {{- end }}
          env:
            {{- if .Values.auth.enabled }}
            - name: RABBITMQ_DEFAULT_USER
              value: {{ .Values.auth.username | quote }}
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "rabbitmq.secretName" . }}
                  key: {{ include "rabbitmq.secretPasswordKey" . }}
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ include "rabbitmq.secretName" . }}
                  key: {{ include "rabbitmq.secretErlangCookieKey" . }}
            {{- end }}
            - name: RABBITMQ_USE_LONGNAME
              value: {{ .Values.peerDiscoveryK8sPlugin.useLongname | quote }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.peerDiscoveryK8sPlugin.useLongname }}
            - name: RABBITMQ_NODENAME
              value: rabbit@$(NODE_NAME).{{ include "rabbitmq.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- else }}
            - name: RABBITMQ_NODENAME
              value: rabbit@$(NODE_NAME)
            {{- end }}
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
            - name: logs
              mountPath: /var/log/rabbitmq
            {{- if .Values.installPlugins }}
            - name: plugins
              mountPath: /opt/rabbitmq/plugins
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
      volumes:
        - name: logs
          emptyDir: {}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if .Values.installPlugins }}
        - name: plugins
          emptyDir: {}
        {{- end }}
        - name: config
          configMap:
            name: {{ include "rabbitmq.fullname" . }}-config
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}
