apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
  {{- with (include "redis.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "redis.fullname" . }}-headless
  replicas: {{ if eq .Values.architecture "standalone" }}1{{ else }}{{ .Values.replicaCount }}{{ end }}
  selector:
    matchLabels:
      {{- include "redis.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
      {{- if or .Values.config.content .Values.config.existingConfigmap }}
      annotations:
        {{- if and .Values.config.content (not .Values.config.existingConfigmap) }}
        checksum/config: {{ .Values.config.content | sha256sum }}
        {{- else if .Values.config.existingConfigmap }}
        checksum/config: {{ .Values.config.existingConfigmap | sha256sum }}
        {{- end }}
      {{- end }}
    spec:
{{- with (include "redis.imagePullSecrets" .) }}
{{ . | nindent 6 }}
{{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
      initContainers:
        - name: redis-init
          image: {{ include "redis.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              # Get pod ordinal from hostname
              POD_ORDINAL=$(hostname | sed 's/.*-//')
              MY_HOSTNAME=$(hostname)

              # Copy base config
              if [ -f "{{ include "redis.configFullName" . }}" ]; then
                cp {{ include "redis.configFullName" . }} /tmp/redis.conf
              else
                # Create minimal config if no config exists
                cat > /tmp/redis.conf << EOF
              bind 0.0.0.0
              port 6379
              EOF
              fi

              # Add Redis configurations for better Sentinel failover tolerance
              echo "" >> /tmp/redis.conf
              echo "# Configurations for Kubernetes force deletion tolerance" >> /tmp/redis.conf
              echo "min-slaves-to-write 0" >> /tmp/redis.conf
              echo "min-slaves-max-lag 0" >> /tmp/redis.conf

              echo "Pod ordinal: $POD_ORDINAL, hostname: $MY_HOSTNAME"

              # Try to determine current master from Sentinel (if any sentinel is available)
              CURRENT_MASTER=""
              SENTINEL_FOUND=false

              # Check if any sentinel is already running and knows the master
              for i in $(seq 0 $(({{ if eq .Values.architecture "standalone" }}1{{ else }}{{ .Values.replicaCount }}{{ end }} - 1))); do
                SENTINEL_HOST="{{ include "redis.fullname" . }}-${i}.{{ include "redis.fullname" . }}-headless"
                MASTER_INFO=$(redis-cli -h "${SENTINEL_HOST}" -p {{ .Values.sentinel.port }} {{- if .Values.auth.enabled }} -a "${REDIS_PASSWORD}"{{- end }} sentinel get-master-addr-by-name {{ .Values.sentinel.masterName }} 2>/dev/null | head -1 || echo "")
                if [ -n "$MASTER_INFO" ] && [ "$MASTER_INFO" != "Could not connect" ]; then
                  CURRENT_MASTER="$MASTER_INFO"
                  SENTINEL_FOUND=true
                  echo "Found current master from sentinel: $CURRENT_MASTER"
                  break
                fi
              done

              # Configuration logic
              if [ "$SENTINEL_FOUND" = true ] && [ -n "$CURRENT_MASTER" ]; then
                # Sentinel knows the master - configure accordingly
                MY_HOSTNAME=$(hostname)
                MY_HOSTNAME_FQDN="${MY_HOSTNAME}.{{ include "redis.fullname" . }}-headless"
                MY_IP=$(hostname -i)

                # Check if I am the master by hostname or IP
                if [ "$MY_IP" = "$CURRENT_MASTER" ] || [ "$MY_HOSTNAME_FQDN" = "$CURRENT_MASTER" ] || [ "$MY_HOSTNAME" = "$CURRENT_MASTER" ]; then
                  echo "I am the current master according to Sentinel"
                else
                  echo "Configuring as replica of current master: $CURRENT_MASTER"
                  echo "replicaof $CURRENT_MASTER {{ .Values.service.port }}" >> /tmp/redis.conf
                  {{- if .Values.auth.enabled }}
                  echo "masterauth ${REDIS_PASSWORD}" >> /tmp/redis.conf
                  {{- end }}
                fi
              else
                # No sentinel available - use bootstrap logic
                if [ "$POD_ORDINAL" != "0" ]; then
                  echo "Bootstrap mode: configuring as replica of pod-0"
                  # Use hostname-based replication for better resilience
                  MASTER_HOSTNAME="{{ include "redis.fullname" . }}-0.{{ include "redis.fullname" . }}-headless"
                  echo "replicaof $MASTER_HOSTNAME {{ .Values.service.port }}" >> /tmp/redis.conf
                  echo "Bootstrap replica using pod-0 hostname: $MASTER_HOSTNAME"
                  {{- if .Values.auth.enabled }}
                  echo "masterauth ${REDIS_PASSWORD}" >> /tmp/redis.conf
                  {{- end }}
                else
                  echo "Bootstrap mode: pod-0 starting as initial master"
                fi
              fi

              # Configure for Sentinel discovery and force deletion tolerance
              echo "replica-announce-ip $(hostname -i)" >> /tmp/redis.conf
              echo "replica-announce-port {{ .Values.service.port }}" >> /tmp/redis.conf
              echo "slave-announce-ip $(hostname -i)" >> /tmp/redis.conf
              echo "slave-announce-port {{ .Values.service.port }}" >> /tmp/redis.conf

              # Make slaves more eligible for promotion during force deletions
              echo "slave-priority 100" >> /tmp/redis.conf
              echo "replica-read-only yes" >> /tmp/redis.conf
          {{- if .Values.auth.enabled }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
          {{- end }}
          resources: {{- toYaml .Values.initContainer.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: {{ .Values.config.mountPath }}
            - name: redis-config
              mountPath: /tmp
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ include "redis.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
              CONFIG_FILE="/tmp/redis.conf"
              {{- else }}
              CONFIG_FILE="{{ include "redis.configFullName" . }}"
              {{- end }}

              {{- if .Values.auth.enabled }}
              redis-server "$CONFIG_FILE" --requirepass "${REDIS_PASSWORD}"
              {{- else }}
              redis-server "$CONFIG_FILE"
              {{- end }}
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          {{- if or .Values.auth.enabled .Values.extraEnv }}
          env:
            {{- if .Values.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
            {{- end }}
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                {{- if .Values.auth.enabled }}
                - redis-cli -a ${REDIS_PASSWORD} ping
                {{- else }}
                - redis-cli ping
                {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
                  {{- if .Values.auth.enabled }}
                  redis-cli -a ${REDIS_PASSWORD} ping | grep -q PONG
                  {{- else }}
                  redis-cli ping | grep -q PONG
                  {{- end }}
                  {{- else }}
                  {{- if .Values.auth.enabled }}
                  redis-cli -a ${REDIS_PASSWORD} ping
                  {{- else }}
                  redis-cli ping
                  {{- end }}
                  {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - /scripts/prestop.sh
          {{- end }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
            - name: redis-config
              mountPath: /tmp
            - name: prestop-script
              mountPath: /scripts
              readOnly: true
            {{- end }}
            {{- if or .Values.config.content .Values.config.existingConfigmap }}
            - name: config
              mountPath: {{ .Values.config.mountPath }}
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
        - name: sentinel
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ include "redis.sentinel.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.sentinel.image) }}
          {{- if .Values.sentinel.extraVolumeMounts }}
          volumeMounts:
            {{- toYaml .Values.sentinel.extraVolumeMounts | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -c
            - |
              set -e

              # Wait for Redis to be ready
              echo "Waiting for Redis to start..."
              while ! redis-cli {{- if .Values.auth.enabled }} -a "${REDIS_PASSWORD}"{{- end }} -h 127.0.0.1 -p {{ .Values.service.port }} ping >/dev/null 2>&1; do
                sleep 1
              done
              echo "Redis is ready"

              # Determine initial master: query existing Sentinels first, fallback to pod-0 only for bootstrap
              POD_ORDINAL=$(hostname | sed 's/.*-//')
              MASTER_HOST=""
              SENTINEL_FOUND_MASTER=false

              # First priority: Try to query other sentinels to find the current master
              echo "Checking existing Sentinels for current master..."
              for i in $(seq 0 $(({{ if eq .Values.architecture "standalone" }}1{{ else }}{{ .Values.replicaCount }}{{ end }} - 1))); do
                if [ "$i" != "$POD_ORDINAL" ]; then
                  SENTINEL_HOST="{{ include "redis.fullname" . }}-${i}.{{ include "redis.fullname" . }}-headless"
                  EXISTING_MASTER=$(redis-cli -h "${SENTINEL_HOST}" -p {{ .Values.sentinel.port }} {{- if .Values.auth.enabled }} -a "${REDIS_PASSWORD}"{{- end }} sentinel get-master-addr-by-name {{ .Values.sentinel.masterName }} 2>/dev/null | head -1 || echo "")
                  if [ -n "$EXISTING_MASTER" ] && [ "$EXISTING_MASTER" != "Could not connect" ]; then
                    MASTER_HOST="$EXISTING_MASTER"
                    SENTINEL_FOUND_MASTER=true
                    echo "Found current master via sentinel: $MASTER_HOST"
                    break
                  fi
                fi
              done

              # Second priority: If no Sentinels found master, check if any Redis instance claims to be master
              if [ "$SENTINEL_FOUND_MASTER" = false ]; then
                echo "No Sentinels available, checking Redis instances directly..."
                for i in $(seq 0 $(({{ if eq .Values.architecture "standalone" }}1{{ else }}{{ .Values.replicaCount }}{{ end }} - 1))); do
                  REDIS_HOST="{{ include "redis.fullname" . }}-${i}.{{ include "redis.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local"
                  ROLE_INFO=$(redis-cli -h "${REDIS_HOST}" -p {{ .Values.service.port }} {{- if .Values.auth.enabled }} -a "${REDIS_PASSWORD}"{{- end }} info replication 2>/dev/null | grep "role:master" || echo "")
                  if [ -n "$ROLE_INFO" ]; then
                    MASTER_HOST="$REDIS_HOST"
                    echo "Found current master by role check: $MASTER_HOST"
                    break
                  fi
                done
              fi

              # Final fallback: Use pod-0 hostname for initial bootstrap only
              if [ -z "$MASTER_HOST" ]; then
                MASTER_HOST="{{ include "redis.fullname" . }}-0.{{ include "redis.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local"
                echo "No existing master found, using pod-0 for initial bootstrap: $MASTER_HOST"
              fi

              # Create Sentinel config
              cat > /tmp/sentinel.conf << EOF
              port {{ .Values.sentinel.port }}
              bind 0.0.0.0
              # Enable hostname resolution for Redis Sentinel
              sentinel resolve-hostnames yes
              sentinel announce-hostnames yes
              sentinel monitor {{ .Values.sentinel.masterName }} ${MASTER_HOST} {{ .Values.service.port }} {{ .Values.sentinel.quorum }}
              sentinel down-after-milliseconds {{ .Values.sentinel.masterName }} {{ .Values.sentinel.downAfterMilliseconds }}
              sentinel failover-timeout {{ .Values.sentinel.masterName }} {{ .Values.sentinel.failoverTimeout }}
              sentinel parallel-syncs {{ .Values.sentinel.masterName }} {{ .Values.sentinel.parallelSyncs }}
              {{- if .Values.auth.enabled }}
              sentinel auth-pass {{ .Values.sentinel.masterName }} "${REDIS_PASSWORD}"
              requirepass "${REDIS_PASSWORD}"
              {{- end }}
              # Make automatic failover more aggressive for Kubernetes force deletions
              sentinel deny-scripts-reconfig yes
              # Fix leader election issues during force deletions
              protected-mode no
              # CRITICAL: Track disconnected slaves for force deletion tolerance
              sentinel_link_buffer_size 32768
              # Allow sentinels to discover each other
              sentinel announce-ip $(hostname -i)
              sentinel announce-port {{ .Values.sentinel.port }}
              logfile ""
              loglevel notice
              EOF

              # Add known sentinels to help with discovery (using hostnames for resilience)
              for i in $(seq 0 $(({{ if eq .Values.architecture "standalone" }}1{{ else }}{{ .Values.replicaCount }}{{ end }} - 1))); do
                if [ "$i" != "$POD_ORDINAL" ]; then
                  SENTINEL_HOST="{{ include "redis.fullname" . }}-${i}.{{ include "redis.fullname" . }}-headless"
                  # Test if the host is resolvable before adding
                  if getent hosts "$SENTINEL_HOST" >/dev/null 2>&1; then
                    SENTINEL_IP=$(getent hosts "$SENTINEL_HOST" | awk '{print $1}' | head -1)
                    if [ -n "$SENTINEL_IP" ]; then
                      echo "sentinel known-sentinel {{ .Values.sentinel.masterName }} ${SENTINEL_IP} {{ .Values.sentinel.port }}" >> /tmp/sentinel.conf
                    fi
                  fi
                fi
              done

              echo "Starting Sentinel with config:"
              cat /tmp/sentinel.conf

              redis-sentinel /tmp/sentinel.conf
          ports:
            - name: sentinel
              containerPort: {{ .Values.sentinel.port }}
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  # Check if sentinel is responding
                  redis-cli -h 127.0.0.1 -p {{ .Values.sentinel.port }} {{- if .Values.auth.enabled }} -a "${REDIS_PASSWORD}"{{- end }} ping | grep -q PONG
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          {{- if .Values.auth.enabled }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
          {{- end }}
          resources: {{- toYaml .Values.sentinel.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ include "redis.metrics.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.metrics.image) }}
          {{- if .Values.auth.enabled }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
          {{- end }}
          command:
            - /redis_exporter
            {{- range .Values.metrics.extraArgs }}
            - {{ . }}
            {{- end }}
          args:
            {{- if .Values.auth.enabled }}
            - --redis.password=$(REDIS_PASSWORD)
            {{- end }}
            {{- if .Values.metrics.extraArgs }}
            {{- range .Values.metrics.extraArgs }}
            {{- if not (hasPrefix "--" .) }}
            - {{ . }}
            {{- end }}
            {{- end }}
            {{- end }}
          ports:
            - name: metrics
              containerPort: 9121
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          resources: {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if and .Values.sentinel.enabled (eq .Values.architecture "replication") }}
        - name: redis-config
          emptyDir: {}
        - name: prestop-script
          configMap:
            name: {{ include "redis.fullname" . }}-prestop-script
            defaultMode: 0755
        {{- end }}
        {{- if or .Values.config.content .Values.config.existingConfigmap }}
        - name: config
          configMap:
            {{- if .Values.config.existingConfigmap }}
            name: {{ .Values.config.existingConfigmap }}
            {{- else }}
            name: {{ include "redis.fullname" . }}-config
            {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  {{- if .Values.persistentVolumeClaimRetentionPolicy.enabled }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenScaled: {{ .Values.persistentVolumeClaimRetentionPolicy.whenScaled }}
  {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}
