## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker Image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters
## @param nameOverride String to partially override redis.fullname
nameOverride: ""
## @param fullnameOverride String to fully override redis.fullname
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @section Redis image parameters
image:
  ## @param image.registry Redis image registry
  registry: docker.io
  ## @param image.repository Redis image repository
  repository: redis
  ## @param image.tag Redis image tag
  tag: "8.2.1@sha256:acb90ced0bd769b7c04cb4c32c4494ba7b3e0ee068bdbfff0eeb0d31c2a21078"
  ## @param image.pullPolicy Redis image pull policy
  pullPolicy: Always

## @section Redis Architecture
## @param architecture Redis architecture. Allowed values: standalone or replication
architecture: standalone

## @param replicaCount Number of Redis instances to deploy (only when architecture=replication)
## When using Sentinel, this is the total number of Redis instances (including the initial master)
## For example: replicaCount: 3 creates 3 Redis instances where Sentinel manages master/replica roles
replicaCount: 3

service:
  ## @param service.type Kubernetes service type
  type: ClusterIP
  ## @param service.port Redis service port
  port: 6379

auth:
  ## @param auth.enabled Enable Redis authentication
  enabled: true
  ## @param auth.password Redis password (if empty, random password will be generated)
  password: ""
  ## @param auth.existingSecret Name of existing secret containing Redis password
  existingSecret: ""
  ## @param auth.existingSecretPasswordKey Key in existing secret containing Redis password
  existingSecretPasswordKey: ""

## @section config Redis configuration options
config:
  ## @param config.mountPath Redis configuration options
  mountPath: /usr/local/etc/redis
  ## @param config.content Include your custom Redis configurations here as string
  content: |
    # Redis configuration
    bind 0.0.0.0
    port 6379
  ## param config.existingConfigmap Name of an existing Configmap to use instead of creating one
  existingConfigmap: ""
  ## param config.existingConfigmapKey Name of the key in the Configmap that should be used
  existingConfigmapKey: ""

persistence:
  ## @param persistence.enabled Enable persistent storage
  enabled: true
  ## @param persistence.storageClass Storage class to use for persistent volume
  storageClass: ""
  ## @param persistence.accessMode Access mode for persistent volume
  accessMode: ReadWriteOnce
  ## @param persistence.size Size of persistent volume
  size: 8Gi
  ## @param persistence.mountPath Mount path for Redis data
  mountPath: /data
  ## @param persistence.annotations Annotations for persistent volume claims
  annotations: {}

## @param resources Resource limits and requests for Redis pod
resources:
  limits:
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 128Mi

## @param nodeSelector Node selector for pod assignment
nodeSelector: {}

## @param priorityClassName for pod eviction
priorityClassName: ""

## @param tolerations Tolerations for pod assignment
tolerations: []

## @param affinity Affinity rules for pod assignment
affinity: {}

containerSecurityContext:
  ## @param securityContext.runAsUser User ID to run the container
  runAsUser: 999
  ## @param securityContext.runAsNonRoot Run as non-root user
  runAsNonRoot: true
  ## @param containerSecurityContext.allowPrivilegeEscalation Set Redis container's privilege escalation
  allowPrivilegeEscalation: false

## @param podSecurityContext Security context for the pod
podSecurityContext:
  ## @param podSecurityContext.fsGroup Set Redis pod's Security Context fsGroup
  fsGroup: 999

livenessProbe:
  ## @param livenessProbe.enabled Enable liveness probe
  enabled: true
  ## @param livenessProbe.initialDelaySeconds Initial delay before starting probes
  initialDelaySeconds: 30
  ## @param livenessProbe.periodSeconds How often to perform the probe
  periodSeconds: 10
  ## @param livenessProbe.timeoutSeconds Timeout for each probe attempt
  timeoutSeconds: 5
  ## @param livenessProbe.failureThreshold Number of failures before pod is restarted
  failureThreshold: 6
  ## @param livenessProbe.successThreshold Number of successes to mark probe as successful
  successThreshold: 1

readinessProbe:
  ## @param readinessProbe.enabled Enable readiness probe
  enabled: true
  ## @param readinessProbe.initialDelaySeconds Initial delay before starting probes
  initialDelaySeconds: 5
  ## @param readinessProbe.periodSeconds How often to perform the probe
  periodSeconds: 10
  ## @param readinessProbe.timeoutSeconds Timeout for each probe attempt
  timeoutSeconds: 5
  ## @param readinessProbe.failureThreshold Number of failures before pod is marked unready
  failureThreshold: 6
  ## @param readinessProbe.successThreshold Number of successes to mark probe as successful
  successThreshold: 1

## @param extraEnv Additional environment variables to set
extraEnv: []
# - name: EXTRA_VAR
#   value: "extra_value"

## @param extraVolumes Additional volumes to add to the pod
extraVolumes: []

## @param extraVolumeMounts Additional volume mounts to add to the Redis container
extraVolumeMounts: []

## @section Redis Sentinel configuration
## This section configures Redis Sentinel for high availability in replication mode
## When enabled, Redis instances use dynamic master/replica role assignment managed by Sentinel
sentinel:
  ## @param sentinel.enabled Enable Redis Sentinel for high availability
  ## IMPORTANT: When enabled, applications should use Sentinel-aware clients to discover the current master
  enabled: false
  ## @param sentinel.image.repository Redis Sentinel image repository
  image:
    repository: redis
    tag: "8.2.1@sha256:acb90ced0bd769b7c04cb4c32c4494ba7b3e0ee068bdbfff0eeb0d31c2a21078"
    pullPolicy: Always
  ## @param sentinel.masterName Name of the master server (default: mymaster)
  masterName: mymaster
  ## @param sentinel.quorum Number of Sentinels that need to agree about the fact the master is not reachable
  quorum: 2
  ## @param sentinel.downAfterMilliseconds Time in milliseconds after the master is declared down
  downAfterMilliseconds: 1500
  ## @param sentinel.failoverTimeout Timeout for failover in milliseconds
  failoverTimeout: 15000
  ## @param sentinel.parallelSyncs Number of replicas that can be reconfigured to use the new master during a failover
  parallelSyncs: 1
  ## @param sentinel.port Sentinel port
  port: 26379
  service:
    ## @param sentinel.service.type Kubernetes service type for Sentinel
    type: ClusterIP
    ## @param sentinel.service.port Sentinel service port
    port: 26379
  ## @param sentinel.resources Resource limits and requests for Sentinel pods
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 64Mi

## @param resources Resource limits and requests for Redis init container pod
initContainer:
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 64Mi

## @param extraObjects Array of extra objects to deploy with the release
extraObjects: []
# - apiVersion: v1
#   kind: ConfigMap
#   metadata:
#     name: extra-config
#     namespace: "{{ .Release.Namespace }}"
#   data:
#     key: value
